#  Template NodeJS build

#  This template allows you to validate your NodeJS code.
#  The workflow allows running tests and code linting on the default branch.

image: node:18

definitions:
  services:
    docker:
      memory: 3072 # Memory in MB -  allocate 3GB (3072MB) of memory to docker service

  caches:
    backend-node:
      key:
        files:
          - backend/package-lock.json
      path: backend/node_modules
    frontend-node:
      key:
        files:
          - frontend/yarn.lock
      path: frontend/node_modules

  scripts:
    - script: &build-and-save-script |-
        echo ${CI_REGISTRY_PASSWORD} | docker login $CI_REGISTRY --username $CI_REGISTRY_USERNAME --password-stdin
        export DOCKER_BUILDKIT=1
        IMAGE_NAME=$BITBUCKET_REPO_SLUG
        IMAGE=${CI_REGISTRY}/${IMAGE_NAME}
        docker build --cache-from ${IMAGE}:${VERSION} --file compose/node/Dockerfile.production --tag ${IMAGE_NAME} --build-arg BUILDKIT_INLINE_CACHE=1 .
        docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
    - script: &push-image-script |-
        echo ${CI_REGISTRY_PASSWORD} | docker login $CI_REGISTRY --username $CI_REGISTRY_USERNAME --password-stdin
        IMAGE_NAME=$BITBUCKET_REPO_SLUG
        IMAGE=${CI_REGISTRY}/${IMAGE_NAME}
        docker load --input "${IMAGE_NAME}.tar"
        docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
        docker push "${IMAGE}:${VERSION}"
        docker tag "${IMAGE_NAME}" "${IMAGE}:${TAG_NAME}"
        docker push "${IMAGE}:${TAG_NAME}"
  steps:
    - step: &build-and-test
        name: build and test
        size: 2x
        script:
          - export VERSION=staging
          - *build-and-save-script
        services:
          - docker
        artifacts:
          - "*.tar"
    - step: &push-image
        name: Push Image
        size: 2x
        script:
          - export VERSION="${BITBUCKET_COMMIT}-staging"
          - export TAG_NAME="staging"
          - *push-image-script
        services:
          - docker

pipelines:
  default:
    - parallel:
        - step:
            name: Code linting frontend
            script:
              - cd frontend
              - yarn install
              - yarn run lint
            caches:
              - frontend-node
        - step:
            name: Code linting backend
            script:
              - cd backend
              - npm install
              - npm run lint
            caches:
              - backend-node
  # pull-requests:
  #   '**': # this trigger will make the pipeline run for all Pull Requests
  #     - step: *build-and-test
  #     - step: *push-image
  branches:
    develop:
      - step: *build-and-test
      - step: *push-image
      - step:
          name: Deploy to staging
          deployment: staging
          script:
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER_DEV
                SERVER: $SSH_SERVER_DEV
                MODE: 'script'
                COMMAND: './scripts/deploy.staging.sh' # path to a script in your repository
                ENV_VARS: >-
                  CI_REGISTRY_USERNAME=${CI_REGISTRY_USERNAME}
                  CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}
                  CI_REGISTRY=${CI_REGISTRY}
                  CI_REGISTRY_IMAGE=${CI_REGISTRY}/${BITBUCKET_REPO_SLUG}
    '{release/**,hotfix/**,master}':
      - step:
          name: Security Scan
          script:
            # Run a security scan for sensitive data.
            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
            - pipe: atlassian/git-secrets-scan:0.5.1
      - step:
          <<: *build-and-test
          script:
          - export VERSION=latest
          - *build-and-save-script

      - step:
          <<: *push-image
          script:
          - export VERSION="${BITBUCKET_COMMIT}-master"
          - export TAG_NAME="latest"
          - *push-image-script
      - step:
          name: 'Deployment to Production'
          deployment: production
          trigger: 'manual'
          script:
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                MODE: 'script'
                COMMAND: './scripts/deploy.production.sh' # path to a script in your repository
                ENV_VARS: >-
                  CI_REGISTRY_USERNAME=${CI_REGISTRY_USERNAME}
                  CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}
                  CI_REGISTRY=${CI_REGISTRY}
                  CI_REGISTRY_IMAGE=${CI_REGISTRY}/${BITBUCKET_REPO_SLUG}
  tags:
    '*':
      - step:
          name: reTag and rePush image
          script:
            - VERSION="${BITBUCKET_COMMIT}-master"
            # get the image that was built in the master branch
            - export IMAGE=${CI_REGISTRY}/${BITBUCKET_REPO_SLUG}
            - export IMAGE_NAME=${IMAGE}:${VERSION}
            - export NEW_IMAGE_NAME=${IMAGE}:${BITBUCKET_TAG}
            # authenticate with the Docker Hub registry
            - echo ${CI_REGISTRY_PASSWORD} | docker login $CI_REGISTRY --username $CI_REGISTRY_USERNAME --password-stdin
            # pull the image down
            - docker pull ${IMAGE_NAME}
            # reTag the image using the git tag
            - docker tag ${IMAGE_NAME} ${NEW_IMAGE_NAME}
            # push the image back
            - docker push ${NEW_IMAGE_NAME}
            - export LATEST_IMAGE_NAME=${IMAGE}:latest
            - docker tag ${IMAGE_NAME} ${LATEST_IMAGE_NAME}
            # push the image back
            - docker push ${NEW_IMAGE_NAME}
          services:
            - docker

